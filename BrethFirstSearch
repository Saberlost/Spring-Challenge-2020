/**
 * Grab the pellets as fast as you can!
 **/




class Cell {
    constructor (
        private pebble :number,
        private wall : Boolean,
        private x : number, 
        private y : number,
        private discovered : Boolean = false,
        private pacmanId : number = -1,
        private possibleScore : number =  1,
        private evilPacman : Boolean = false
       
        ) {
            if (wall){
                this.possibleScore = 0
            }
        }
        

 
    isWall()  : Boolean  {
        return this.wall;
    }
    
    getPebbleScore() : number {
        return this.pebble
    }

    setPebbleScore(pebbleScore:number){
        this.pebble = pebbleScore
    }

    setPossibleScore(score : number){
        this.possibleScore = score
    }

    getPossibleScore(): number {
        return this.possibleScore
    }

    getPebbleOrPossiblePebble() : number{
        if( this.pebble > 0){
            return  this.pebble
        }
         return this.possibleScore 
    }

    getX() :number{
        return this.x;
    }
    
    getY() : number {
        return this.y;
    }


    //Used when searching?
    isDiscovered() : Boolean {
        return this.discovered;
    }
    
    setDiscovered(discovered: Boolean){
        this.discovered = discovered
    }

    isPacman() :Boolean{
        return this.pacmanId != -1
    }
    
    setPacmanId(pacmanId : number){
        this.pacmanId = pacmanId
    }

    getPacmanId() :number {
        return this.pacmanId
    }

    setIsEvil(evil : Boolean){
        this.evilPacman = evil 
    }

    isEvil() :Boolean{
        return this.evilPacman
    }

    
 
    
}


enum PacmanType {
    ROCK = "ROCK",
    PAPER = "PAPER",
    SCISSORS = "SCISSORS",
    Dead = "DEAD",
    None = ""
}


class Pacman{
     constructor (
        private id:number,
        private cell: Cell,
        private oldCell : Cell = null,
        private type : PacmanType = PacmanType.None,
        private exploreX : number = -1,
        private exploreY : number = -1,
        private failedMove : number = 0,
        private speedCooldown : number = 0,
        private speedTurnsLeft : number = 0,
        private abilityCooldown : number = 0,
        private dead : Boolean = false

        ) {}

       

    getAbilityCooldown() : number{
        return this.abilityCooldown
    }

    setAbilityCooldown(abilityCooldown : number) {
        this.abilityCooldown = abilityCooldown
    }

    getId() : number{
        return this.id
    }

    getType():PacmanType{
        return this.type
    }
    setType(type :PacmanType){
        this.type = type
    }

    getCell():Cell{
        return this.cell
    }



    setCell(cell :Cell ){
        this.oldCell = this.cell
        this.cell = cell;
        if(this.oldCell == cell){
            //did not move
            this.failedMove += 1
        } else{
            this.failedMove = 0
        }
    }

    setSpeedColdown(cooldown : number){
        this.speedCooldown = cooldown

    }

    isSpeedOnColdown() :Boolean {
        return this.speedCooldown> 0
    }

    getSpeedTurnsLeft() :number{
        return this.speedTurnsLeft
    }
    
    setSpeedTurnsLeft(left : number){
        this.speedTurnsLeft = left
    }

    needNewStrategy() :Boolean{
        if(this.failedMove > 3){
            return true
        }
        return false
    }

    getExploreX() : number{
        return this.exploreX;
    }
    setExploreX(x : number){
        return this.exploreX = x;
    }

    getExploreY() : number{
        return this.exploreY;
    }
    
    setExploreY(y : number){
        return this.exploreY = y;
    }

    standOnExplore() :boolean{
        return 
            (this.cell.getX() == this.exploreX &&
            this.cell.getY() == this.exploreY ) ||
            this.exploreX == -1
    }

    isDead():Boolean {
        return this.dead
    }

    setDead(dead :Boolean) {
        this.dead = dead
    }


}




let board : Array<Cell> = new Array<Cell>()

var inputs: string[] = readline().split(' ');
const width: number = parseInt(inputs[0]); // size of the grid
const height: number = parseInt(inputs[1]); // top left corner is (x=0, y=0)
for (let i = 0; i < height; i++) {
    const row: string = readline(); // one line of the grid: space " " is floor, pound "#" is wall
    console.error("row : " +row)

    for (let j = 0; j < width; j++){
        if(row.charAt(j) == '#'){
            board.push(new Cell(0, true,  j, i));
        } else  {
             board.push(new Cell(0, false,  j ,i ));
        }
    }
}



function toBoardNumber(x :number, y:number ) : number{
    //console.error("x"+x +" y " +y +" gives :" + (y*width +x ))
    return y*width +x ;
}



function getRandomInt(max: number) :number {
  return Math.floor(Math.random() * Math.floor(max));
}


function up (y : number ) : number {
    return y-1;
}


function down (y : number ) : number {
    return y+1;
}

function left (x : number ) : number {
    return x-1;
}


function right (x : number ) : number {
    return x+1;
}



function getUpCell(x: number, y: number, board : Array<Cell>) : Cell{
    let newy = up(y)
    if (newy < 0){
        return null;
    }
    return board[toBoardNumber(x,newy)] 
}


function getDownCell(x: number, y: number, board : Array<Cell>) : Cell{
    let newy = y +1;
    if (newy > height){
        return null;
    }
    
    return board[toBoardNumber(x,newy)] 
   
}

function getLeftCell(x: number, y: number, board : Array<Cell>) : Cell{
    let newX =  x -1;
    if(x == 0){
        // width could be 31, then we have 0 to 30. 
        newX = width -1

    } else  if (newX < 0){
        return null;
    }
    return board[toBoardNumber(newX,y)] 
}

function getRigthCell(x: number, y: number, board : Array<Cell>) : Cell{
  
    let newX =  x + 1;
  
    
    if(newX == width){
       newX = 0
      
    }
    else if (newX > width){
        return null;
    }
   return board[toBoardNumber(newX,y)] 
   
}

function checkAndEnqueu(cell : Cell, prevCell:Cell, nextCells:Array<Cell>, myPacman : Map<number, Pacman>) : Boolean{
    if (cell != null && cell.isDiscovered() == false &&  !cell.isWall() && (cell.isEvil() || !myPacman.has(cell.getPacmanId()))) {// && !cell.isPacman()){
        
        cell.setDiscovered(true);
        
        nextCells.push(cell)
        return true;
    }
    return false;
}


function checkIfCanEatEvilPacman(cell : Cell, myPacman:Pacman, evilPacman:Map<number, Pacman>) :Boolean{
   
    console.error("Found evil pacman" )
    let evil : Pacman = evilPacman.get(cell.getPacmanId())
    if(myPacman.getType() == PacmanType.PAPER && evil.getType() == PacmanType.ROCK && evil.getAbilityCooldown() > 0 )
    {
        return true
    }
    else if(myPacman.getType() == PacmanType.ROCK && evil.getType() == PacmanType.SCISSORS && evil.getAbilityCooldown() > 0)
    {
        console.error("Eat")
        return true
    }
    else if(myPacman.getType() == PacmanType.SCISSORS && evil.getType() == PacmanType.PAPER && evil.getAbilityCooldown() > 0)
    {
        return true
    }
    
    
        
    return false       
}

function findHighValuePebble(x : number, y : number ,  board : Array<Cell>, pacman:Pacman, myPacman : Map<number, Pacman>, evilPacman : Map<number, Pacman>) : Cell{
    let returnCell : Array<Cell> = new Array<Cell>();
    let nextCells : Array<Cell> = new Array<Cell>();
    let allVisitedCelsls :Array<Cell> = new Array<Cell>();
    let c: Cell = board[toBoardNumber(x,y)]    
    c.setDiscovered(true);
    nextCells.push(c);
    let serchLeft = 1 +4 +8 + 12 +16 +20 + 24 // 6 depth

    while (nextCells.length > 0 && serchLeft > 0){
        serchLeft -=1 
        let v : Cell = nextCells.shift()// pop == depth first? shift = breth first?
        if (v.isEvil() && evilPacman.has(v.getPacmanId())){
            if( !checkIfCanEatEvilPacman(v, pacman, evilPacman)){
                continue
            }
        }
        if(v.getPebbleScore() > 1 ){
            return v
        }

            
        
        allVisitedCelsls.push(v)
        let up :Cell = getUpCell(v.getX(), v.getY(), board)
        let down :Cell = getDownCell(v.getX(), v.getY(), board)
        let left :Cell = getLeftCell(v.getX(), v.getY(), board)
        let rigth :Cell = getRigthCell(v.getX(), v.getY(), board)
        if(!checkAndEnqueu(up,  v, nextCells, myPacman)){
            serchLeft -=1 
        }
        if (checkAndEnqueu(left, v, nextCells,myPacman)){
            serchLeft -=1 
        }
        if (checkAndEnqueu(down, v, nextCells, myPacman)){
            serchLeft -=1 
        }
        if (checkAndEnqueu(rigth, v, nextCells, myPacman)){
            serchLeft -=1 
        }
    }
    return null
}
    


//Breth first search for the cloest pebble
function findPath(x : number, y : number ,  board : Array<Cell>, pacman:Pacman, myPacman : Map<number, Pacman>, evilPacman : Map<number, Pacman>) :Array<Cell>{
    let returnCell : Array<Cell> = new Array<Cell>();
    let nextCells : Array<Cell> = new Array<Cell>();
    let allVisitedCelsls :Array<Cell> = new Array<Cell>();
    let c: Cell = board[toBoardNumber(x,y)]    
    c.setDiscovered(true);
    nextCells.push(c);
    let depth : number = 0;
    let checkExtraDepth :number = 0
    
    if (pacman.getSpeedTurnsLeft() > 0){
        checkExtraDepth = 1
    }
    while (nextCells.length > 0){
        let v : Cell = nextCells.shift()// pop == depth first? shift = breth first?

        if (v.isEvil() && evilPacman.has(v.getPacmanId())){
            if( checkIfCanEatEvilPacman(v,pacman, evilPacman)){
                console.error("eating evil pacman id " +v.getPacmanId() )
                returnCell.push(v)
                return returnCell
            } else{
                console.error("doing pacman is still evil"  +v.getPacmanId() )
                continue
            }
        }
        


        if(v.getPebbleOrPossiblePebble() > 0){ //WE are only finding the clost now
            let up :Cell = getUpCell(v.getX(), v.getY(), board)
            let down :Cell = getDownCell(v.getX(), v.getY(), board)
            let left :Cell = getLeftCell(v.getX(), v.getY(), board)
            let rigth :Cell = getRigthCell(v.getX(), v.getY(), board)
            if (up.isEvil() && evilPacman.has(up.getPacmanId())){
                if( !checkIfCanEatEvilPacman(up, pacman, evilPacman)){
                    continue
                }
            }

            if (down.isEvil() && evilPacman.has(down.getPacmanId())){
                if( !checkIfCanEatEvilPacman(down, pacman, evilPacman)){
                    continue
                }
            }
            
            if (left.isEvil() && evilPacman.has(left.getPacmanId())){
                if( !checkIfCanEatEvilPacman(left, pacman, evilPacman)){
                    console.error("Should not go left")
                    continue
                }
            }

            if (rigth.isEvil() && evilPacman.has(rigth.getPacmanId())){
                if( !checkIfCanEatEvilPacman(rigth, pacman, evilPacman)){
                    continue
                }
            }   
          
            if (checkExtraDepth > 0){
        
                if (up != null && up.getPebbleOrPossiblePebble() > 0){
                    up.setDiscovered(true)
                    returnCell.push(v)
                    returnCell.push(up)
                    return returnCell
                    
                }
                if (down != null && down.getPebbleOrPossiblePebble() > 0){
                    returnCell.push(v)
                    returnCell.push(down)
                    return returnCell
                }
                if (left != null && left.getPebbleOrPossiblePebble() > 0){
                     returnCell.push(v)
                    returnCell.push(left)
                    return returnCell
                }
                if (rigth != null && rigth.getPebbleOrPossiblePebble() > 0){
                    returnCell.push(v)
                    returnCell.push(rigth)
                    return returnCell
                }
                returnCell.push(v)
                return returnCell

            } else {
                returnCell.push(v)
                return returnCell
            }            
        }

        if(v.getPebbleOrPossiblePebble() >  0){
            returnCell.push(v)
            return returnCell
        }

        
        allVisitedCelsls.push(v)
        let up :Cell = getUpCell(v.getX(), v.getY(), board)
        let down :Cell = getDownCell(v.getX(), v.getY(), board)
        let left :Cell = getLeftCell(v.getX(), v.getY(), board)
        let rigth :Cell = getRigthCell(v.getX(), v.getY(), board)
        
        if (up.getPebbleScore() > 1 ){
            checkAndEnqueu(up,  v, nextCells, myPacmans);
            checkAndEnqueu(left, v, nextCells,myPacmans)
            checkAndEnqueu(down, v, nextCells, myPacmans);
            checkAndEnqueu(rigth, v, nextCells, myPacmans);
        }
        else if (down.getPebbleScore() > 1 ){
            
            checkAndEnqueu(down, v, nextCells, myPacmans);
            checkAndEnqueu(up,  v, nextCells, myPacmans);
            checkAndEnqueu(left, v, nextCells,myPacmans)
            checkAndEnqueu(rigth, v, nextCells, myPacmans)
        } else  if (left.getPebbleScore() > 1 ){
            checkAndEnqueu(left, v, nextCells,myPacmans)
            checkAndEnqueu(down, v, nextCells, myPacmans);
            checkAndEnqueu(up,  v, nextCells, myPacmans);
            
            checkAndEnqueu(rigth, v, nextCells, myPacmans)
        } else if (rigth.getPebbleScore() > 1 ){
            checkAndEnqueu(rigth, v, nextCells, myPacmans)
            checkAndEnqueu(left, v, nextCells,myPacmans)
            checkAndEnqueu(down, v, nextCells, myPacmans);
            checkAndEnqueu(up,  v, nextCells, myPacmans);
        } else {
            
            checkAndEnqueu(left, v, nextCells,myPacmans)
            checkAndEnqueu(down, v, nextCells, myPacmans);
            checkAndEnqueu(up,  v, nextCells, myPacmans);
            checkAndEnqueu(rigth, v, nextCells, myPacmans)
        }
       
        
       
        depth++
    }
    console.error("Searched to depth : " + depth)
    
    console.error("allVisitedCelsls lenght : " + allVisitedCelsls.length)
    if (depth == 1){
        return null
    }
    
    return null
/*
    let finalCell: Cell = allVisitedCelsls.pop();
    
   
 
    return finalCell;
    */
}


function setOtherPacmanRoute(pacman:Pacman, board:Array<Cell>){
    if (!pacman.standOnExplore()){
        var cell:Cell = board[toBoardNumber(getRandomInt(width) , getRandomInt(height))];
        while(cell.isWall()){
            cell = board[toBoardNumber(getRandomInt(width) , getRandomInt(height))];
        }
        pacman.setExploreX(cell.getX())
        pacman.setExploreY(cell.getY())
    }
}

function updateBoardFromPacmanView(pacman:Pacman, board:Array<Cell>){
    let v : Cell = pacman.getCell()
    v.setPossibleScore(0)
    console.error("pacman id: " + pacman.getId())
    let up :Cell = getUpCell(pacman.getCell().getX(), pacman.getCell().getY(), board)
    while (up != null &&!up.isWall() && v != up){
        if (up.getPebbleScore() == 0){
            up.setPossibleScore(0)
        }
        up = getUpCell(up.getX(), up.getY(), board)
    }

    
    let down :Cell = getDownCell(v.getX(), v.getY(), board)
    while (down != null &&!down.isWall() && v != down){
        if (down.getPebbleScore() == 0){
            down.setPossibleScore(0)
        }
        down = getDownCell(down.getX(), down.getY(), board)
    }


    let left :Cell = getLeftCell(v.getX(), v.getY(), board)
    while (left != null &&!left.isWall() && v != left){
    if (left.getPebbleScore() == 0){
            left.setPossibleScore(0)
        }
        left = getLeftCell(left.getX(), left.getY(), board)
    }

    
    let rigth :Cell = getRigthCell(v.getX(), v.getY(), board)
    while (rigth != null && !rigth.isWall() && v != left){
        if (rigth.getPebbleScore() == 0){
            rigth.setPossibleScore(0)
        }
        rigth = getRigthCell(rigth.getX(), rigth.getY(), board)
    }
}

function test(board:Array<Cell>){
      let c : Cell = board[toBoardNumber(1,1)] 
      console.error("test now be one or zero " + c.getPossibleScore())
      c.setPossibleScore(0)
}

function test2(board:Array<Cell>){
      let c : Cell = board[toBoardNumber(1,1)] 
      console.error("Should now be zeor " + c.getPossibleScore())
}






 let myPacmans : Map<number, Pacman> = new Map<number, Pacman>()
 

// game loop
while (true) {

    let evilPacmans : Map<number, Pacman> = new Map<number, Pacman>()
   
    board.forEach(function(c :Cell) {
         c.setDiscovered(false)
         c.setPacmanId(-1)
         c.setPebbleScore(0)
         c.setIsEvil(false)
    })

    //assumeDead
    myPacmans.forEach(( pacman:Pacman, id:number) => {
        pacman.setDead(true)
    })
    var inputs: string[] = readline().split(' ');
    const myScore: number = parseInt(inputs[0]);
    const opponentScore: number = parseInt(inputs[1]);
    const visiblePacCount: number = parseInt(readline()); // all your pacs and enemy pacs in sight
    for (let i = 0; i < visiblePacCount; i++) {
        var inputs: string[] = readline().split(' ');
        const pacId: number = parseInt(inputs[0]); // pac number (unique within a team)
        const mine: boolean = inputs[1] !== '0'; // true if this pac is yours
        var xpos : number  = parseInt(inputs[2]); // position in the grid
        var ypos : number  = parseInt(inputs[3]); // position in the grid
        const typeId: string = inputs[4]; // unused in wood leagues
        const speedTurnsLeft: number = parseInt(inputs[5]); // unused in wood leagues
        const abilityCooldown: number = parseInt(inputs[6]); // unused in wood leagues
        let cell:Cell = board[toBoardNumber(xpos,ypos)];
        cell.setPacmanId(pacId)
        
        if (mine == true){       
            console.error("set pacman abilityCooldown " + abilityCooldown + " is " + pacId)
            if(myPacmans.has(pacId)){
                
                let pacman :Pacman = myPacmans.get(pacId)
                pacman.setCell(cell)
                
                pacman.setSpeedColdown(speedTurnsLeft+abilityCooldown)
                pacman.setSpeedTurnsLeft(speedTurnsLeft)
                pacman.setType(PacmanType[typeId])
                
                if(pacman.getType() == PacmanType.Dead){
                    pacman.setDead(true)
                    console.error("set pacman todead")
                } else {
                    pacman.setDead(false)
                }
                

            }else{
                let p :Pacman = new Pacman(pacId, cell)
                
                p.setType(PacmanType[typeId])
                myPacmans.set(pacId, p)
            }
            cell.setIsEvil(false)
        } else{
            var p :Pacman = new Pacman(pacId, cell)
            console.error("Evil pacman id: " + pacId)
            p.setType(PacmanType[typeId])
            evilPacmans.set(pacId, p)
            p.setAbilityCooldown(abilityCooldown)
            if(p.getType() != PacmanType.Dead){
                cell.setIsEvil(true)
            }
            
        }
    }
    const visiblePelletCount: number = parseInt(readline()); // all pellets in sight
    for (let i = 0; i < visiblePelletCount; i++) {
        var inputs: string[] = readline().split(' ');
        const x: number = parseInt(inputs[0]);
        const y: number = parseInt(inputs[1]);
        const value: number = parseInt(inputs[2]); // amount of points this pellet is worth
        let cell:Cell = board[toBoardNumber(x,y)];
        if(cell.getX() != x || cell.getY() != y){
            console.error("x " + x + "y" + y)
            console.error(" found x " + cell.getX() + "y" + cell.getY())
        }
        
        cell.setPebbleScore(value)
        
        if(x == 15 && y == 3){
            console.error("pebble score " +cell.getPebbleScore())
            console.error("pebble score red "+ value)
        }
    }

console.error("My pacman has siz: " + myPacmans.size)
    myPacmans.forEach(( pacman:Pacman, id:number) => {
        if (!pacman.isDead()){
            
        
            updateBoardFromPacmanView(pacman, board)
            let v : Cell = pacman.getCell()
        
        }
    })

    console.error("My pacman has siz: " + myPacmans.size)
    // Write an action using console.log()
    // To debug: console.error('Debug messages...');

    var foundCell : Array<Cell>  = new Array<Cell>() 
    var output : String = ""

    let skipPacman : Array<number> = new Array<number>()

    for (let pacman of myPacmans.values()){
        
        if (pacman.isDead()){
            continue
        }
      
    }

    //Allow them to search where another pacman have been
    board.forEach(function(c :Cell) {
        c.setDiscovered(false)
    })
        //But not same as other pacman found
    foundCell.forEach((cell) => {
        cell.setDiscovered(true)
    })

    for (let pacman of  myPacmans.values()){
        if (pacman.isDead()){
            continue
        }
        if (skipPacman.indexOf(pacman.getId()) > -1){
            continue
        }
        var cell37 : Cell = board[toBoardNumber(3,7)]
        if (!pacman.isSpeedOnColdown()){
            if (output.length > 0 ){
                output = output.concat("|")
            }
            output = output.concat("SPEED " + pacman.getId())
            continue
        }
        
        let startCell : Cell = pacman.getCell()
        
        if (pacman.needNewStrategy()){
            console.error("I am standing still bad ")
            setOtherPacmanRoute(pacman, board)
            if (output.length > 0 ){
                output = output.concat("|")
            }
            output = output.concat("MOVE " + pacman.getId() +" " +pacman.getExploreX() + ' ' + pacman.getExploreY())
            continue
        }
        
        let higCell :Cell = findHighValuePebble(startCell.getX(), startCell.getY(), board, pacman, myPacmans, evilPacmans)
        if (higCell != null){
            if (output.length > 0 ){
                output = output.concat("|")
            }
            output = output.concat("MOVE " + pacman.getId() +" " +higCell.getX() + ' ' + higCell.getY())
            skipPacman.push(pacman.getId())
            foundCell.push(higCell)
            console.error("found high score peblble for pacid : " + pacman.getId())
        } else{
            //Have to reset the board if no high value was found
            board.forEach(function(c :Cell) {
                c.setDiscovered(false)
            })
            //But not same as other pacman found
            foundCell.forEach((cell) => {
                cell.setDiscovered(true)
            })
        

            let cells : Array<Cell> = findPath(startCell.getX(), startCell.getY(), board, pacman, myPacmans, evilPacmans)
            
            if(cells != null){
            
                if (output.length > 0 ){
                    output = output.concat("|")
                }
                foundCell.push(...cells)
                let cell :Cell =cells[cells.length-1]
                output = output.concat("MOVE " + pacman.getId() +" " +cell.getX() + ' ' + cell.getY())
            } 
            else {
                console.error("Did not find pebble")
                if (output.length > 0 ){
                    output = output.concat("|")
                }
                if (!pacman.standOnExplore()){
                    setOtherPacmanRoute(pacman, board)
                }

                output = output.concat("MOVE " + pacman.getId() +" " + pacman.getExploreX() + ' ' + pacman.getExploreY())
            }
        }
        //Allow them to search where another pacman have been
        board.forEach(function(c :Cell) {
            c.setDiscovered(false)
        })
        //But not same as other pacman found
        foundCell.forEach((cell) => {
            cell.setDiscovered(true)
        })
        
    }


    
    if (output != null){
          console.log(output);     // MOVE <pacId> <x> <y>
    } else{
        //got null bug!!
        console.error("FOUND NO PATH BAD!")
         console.log('MOVE 0 5 5')
    }  

}
